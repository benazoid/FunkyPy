

PI = 3.14159265358979323846
E = 2.71828182845904523536

def add(a,b):
	return a + b
def sub(a,b):
	return a - b
def mult(a,b):
	return a * b
def div(a, b):
	return a / b
def mod(a, b):
	return a % b

def fact(n):
	if(n == 0): return 1
	return fact(n - 1) * n

def intPow(x, p):
	prod = 1
	while(p > 0): 
		prod *= x
		p -= 1
	return prod

def riemannSum(funct, a, b, s):
	sum = 0
	step = (b-a)/s
	for n in range(1, s + 1):
		sum += (funct((n-1)*step+a) + funct(n*step+a))/2 * step
	return sum

def inv(x):
	return 1/x

def inverseFunct(funct, deriv, x):
	#uses newton's method
	n = 0
	g = 1
	while(abs(funct(g) / x - 1) > 0.0001):
		g = (x-funct(g))/deriv(g)+g
		n+=1
	return g

def ln(x):
	if(x <= 0):
		raise Exception("Funky Error")
	return riemannSum(inv, 1, x, 20 + int(10*x))

def log(x, b):
	return ln(x) / ln(b)

def exp(x):
	if(x < 5):
		sum = 0
		n = 0
		while(n < 20):
			sum += intPow(x,n)/fact(n)
			n+=1
		return sum
	n = 0
	g = 1
	while(abs(ln(g) / x - 1) > 0.0001):
		g = g*(x-ln(g))+g
		n+=1
	return g

def pow(x, p):
	return exp(x*ln(p))

def cos(x):
	x %= 2*PI
	sum = 0
	n = 0
	while(n < 20):
		sum += (intPow(x,2*n)*intPow(-1,n))/fact(2*n)
		n+=1
	return sum

def sin(x):
	return cos(x - PI/2)

def tan(x):
	return sin(x)/cos(x)

def root(x, r):
	return pow(x,1/r)

def sqrt(x):
	return root(x, 2)

def abs(x):
	if(x < 0):
		return -1*x
	return x
